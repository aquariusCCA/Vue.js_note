甚麼是 webpack ?
	這個 webpack 還真不是一兩句話就可以說清楚的。


我們先看看官方的解釋
	- At its core, webpack is a static module bundler for modern JavaScript applications.
	- 從本質上來講，webpack 是一個現代化的 JavaScript 應用的靜態模塊打包工具。


但是它是什麼呢 ? 用概念解釋概念，還是不清晰。
	我們從兩個點來解釋上面這句話: 模塊 和 打包。

	我們在開發的時候可能會有很多的圖片，比如: .png圖片、.js文件 ... 等等。
	如果直接發送到服務器部屬的話，很有可能透過瀏覽器訪問的時候是不能運行的。
	比如說 .hbs、.sass 都是瀏覽器不支持的，我們必須先將它們編譯成 css 文件。
	所以我們必須經過一些工具，將這些文件進行打包，作一些轉化，變成能讓瀏覽器
	執行的檔案。


前端模塊化
	- 在前面學習中，我們已經用大量的篇幅解釋為甚麼前端需要模塊化。
	
	- 而且我們也提到了目前使用前端模塊化的一些方案，例如: AMD、CMD、CommonJS、ES6。
	比如我們項目中使用了 CommonJS 進行模塊化，此時 webpack 進行打包的時候，就會知道
	你使用了 CommonJS，並進行一些轉化，轉化成瀏覽器能識別的代碼。
	

	- 在 ES6 之前，我們想要進行模塊化開發，就必須借助於其他的工具，
	讓我們可以進行模塊化開發。

	- 並且在通過模塊化開發完成了項目後，還需要處理模塊間的各種依賴，並且將其進行整合打包。

	- 而 webpack 其中一個核心就是讓我們可能進行模塊化開發，並且會幫助我們處理模塊間的依賴
	關係。

	- 而且不僅僅是 JavaScript 文件，我們的 CSS、圖片、json 文件等等，在 webpack 中
	都可以被當作模塊來使用。

	- 這就是 webpack 模塊化的概念。


打包如何理解 ?
	- 理解了 webpack 可以幫助我們進行模塊化，並且處理模塊間的各種複雜關係後，
	打包的概念就非常好理解了。

	- 就是將 webpack 中的各種資源模塊進行打包合併成一個或多個包

	- 並且在打包的過程中，還可以對資源進行處理，比如壓縮圖片，將 SCCS 轉換成 CSS，
	將 ES6 語法轉換成 ES5 語法，將 TypeScript 轉換成 JavaScript 等等操作。

	- 但是打包的操作似乎 grunt / gulp 也可以幫助我們完成，它們有甚麼不同呢?
	

和 grunt / gulp 的對比
    - grunt / gulp 的核心是 Task
        我們可以配置一系列的 task，並且定義 task 要處理的事務 (例如: ES6、ts 轉化，圖片壓縮、SCCS 轉成 CSS)
        之後讓 grunt / gulp 來依次執行這些 task，而且讓整個流程自動化。
        所以 grunt / gulp 也被稱為前端自動化任務管理器工具。

    - 我們來看一個 gulp 的 task
        下面的 task 就是將 src 下面的所有 js 文件轉成 ES5 的語法
        並且最終輸出到 dist 文件夾中。

    - 什麼時候用 grunt / gulp 呢 ?
        如果你的工程模塊依賴非常簡單，甚至是沒有用到模塊化的概念。
        只需要進行簡單的合併、壓縮，就使用 grunt / gulp 即可。
        但是如果整個項目使用了模塊化管理，而且相互依賴非常強，我們
        就可以使用更加強大的 webpack 了。

    - 所以，grunt / gulp 和 webpack 有甚麼不同嗎 ?
        grunt / gulp 更加強調的是前端流程的自動化，模塊化不是它的核心。
        webpack 更加強調模塊化開發管理，而且文件壓縮合併、預處理等功能，
        是它的附帶功能。
 